# Generated by Django 3.2.6 on 2021-11-11 11:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InstitutionDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50, null=True)),
                ('shortName', models.CharField(default='', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientInformation',
            fields=[
                ('firstName', models.CharField(default='', max_length=50, null=True)),
                ('lastName', models.CharField(default='', max_length=50, null=True)),
                ('age', models.IntegerField(default='', null=True)),
                ('gender', models.CharField(default='', max_length=50, null=True)),
                ('woreda', models.CharField(default='', max_length=50, null=True)),
                ('zone', models.CharField(default='', max_length=50, null=True)),
                ('region', models.CharField(default='', max_length=50, null=True)),
                ('job', models.CharField(default='', max_length=50, null=True)),
                ('patientId', models.CharField(default='', max_length=30, primary_key=True, serialize=False, unique=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-updated'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regions', models.CharField(default='', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LaboratoryMeasurement',
            fields=[
                ('patientInformation', models.OneToOneField(default='0', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.patientinformation')),
                ('sbp', models.IntegerField(default='', null=True)),
                ('fbs', models.IntegerField(default='', null=True)),
                ('hw', models.CharField(default='', max_length=50, null=True)),
                ('physcialActivity', models.CharField(default='', max_length=50, null=True)),
                ('diabeticFamilyHistory', models.CharField(default='', max_length=50, null=True)),
                ('impairedGlucose', models.CharField(default='', max_length=50, null=True)),
                ('autoImune', models.CharField(default='', max_length=50, null=True)),
                ('acuteWeightLoss', models.CharField(default='', max_length=50, null=True)),
                ('hypertension', models.CharField(default='', max_length=50, null=True)),
                ('bmi', models.CharField(default='', max_length=50, null=True)),
                ('monofilamenTest', models.CharField(default='', max_length=50)),
                ('neurologicPain', models.CharField(default='', max_length=50)),
                ('disautonomia', models.CharField(default='', max_length=50)),
                ('footDeformity', models.CharField(default='', max_length=50)),
                ('pad', models.CharField(default='', max_length=50)),
                ('decreasedVision', models.CharField(default='', max_length=50)),
                ('floaters', models.CharField(default='', max_length=50)),
                ('retinalScreeningResult', models.CharField(default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PredictionResult',
            fields=[
                ('patientInformation', models.OneToOneField(default='0', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.patientinformation')),
                ('diabetic', models.CharField(default='', max_length=50)),
                ('risk', models.CharField(default='', max_length=50)),
                ('neuropathy', models.CharField(default='', max_length=50)),
                ('opthalmopathy', models.CharField(default='', max_length=50)),
                ('decline', models.CharField(default='', max_length=50, null=True)),
                ('done', models.CharField(default='', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('InstitutionName', models.CharField(blank=True, max_length=2, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
